import telebot
from bson import ObjectId
from telebot import types, TeleBot
from pymongo import MongoClient
import time
from datetime import datetime
import threading
import re
import requests
import random

MONGODB_URI = 'YOUR_MONGODB_URI'
TOKEN = "YOUR_TELEGRAMBOT_KEY"
GOOGLE_BOOKS_API = 'YOUR_TELEGRAM_BOOKS_KEY'

bot: TeleBot = telebot.TeleBot(TOKEN)
client = MongoClient(MONGODB_URI)
db = client.timeToReadBot
books_collection = db.books
users_collection = db.users


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def text_help(message):
    helpFunc(message)


@bot.message_handler(commands=['help'])
def command_help(message):
    helpFunc(message)


def helpFunc(message):
    caption = "/start - –ù–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É —Å –±–æ—Ç–æ–º\n/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç " \
              "—Ä–∞—Å—Å—ã–ª–∫–∏\n/books - –û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É —Å –±–æ—Ç–∞–º–∏\n/dailybook - –ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –¥–Ω—è\n/randombook - –ü–æ–ª—É—á–∏—Ç—å " \
              "—Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É\n/search - –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n/about - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n/help - " \
              "–í—ã–≤–µ–∑—Ç–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n/back - –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É "
    bot.send_message(message.chat.id, caption)


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å")
def text_start(message):
    start(message)


@bot.message_handler(commands=['start'])
def command_start(message):
    start(message)


def start(message):
    print("Start Command Worked")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton('–ö–Ω–∏–≥–∏')
    item2 = types.KeyboardButton('–û –Ω–∞—Å')
    markup.add(item1, item2)
    caption = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —á–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –∫–Ω–∏–≥. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    bot.send_message(message.chat.id, caption, reply_markup=markup)


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–û –Ω–∞—Å")
def text_about(message):
    handle_info(message)


@bot.message_handler(commands=['about'])
def command_about(message):
    handle_info(message)


def handle_info(message):
    bot.send_message(message.chat.id,
                     '–≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –Ω–∞—É—á–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–π '
                     '–º–æ–ª–æ–¥–µ–∂–∏ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π".')


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–ö–Ω–∏–≥–∏")
def text_books(message):
    handle_books(message)


@bot.message_handler(commands=['books'])
def command_books(message):
    handle_books(message)


def handle_books(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    item1 = types.KeyboardButton('–ö–Ω–∏–≥–∞ –¥–Ω—è')
    item2 = types.KeyboardButton('–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞')
    item3 = types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
    item4 = types.KeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É')
    item5 = types.KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    item6 = types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–ö–Ω–∏–≥–∞ –¥–Ω—è")
def text_daily_book(message):
    send_daily_book(message.chat.id)


@bot.message_handler(commands=['dailybook'])
def command_daily_book(message):
    send_daily_book(message.chat.id)


def send_daily_book(chat_id):
    book_of_the_day = books_collection.find_one({'book_of_the_day': True})

    if book_of_the_day:
        title = book_of_the_day.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        author = book_of_the_day.get('author', '–ê–≤—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω')
        description = book_of_the_day.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        link = book_of_the_day.get('link', '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        image_link = book_of_the_day.get('image_link', None)

        message_text = f"üìö –ö–Ω–∏–≥–∞ –¥–Ω—è üìö\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–ê–≤—Ç–æ—Ä: {author}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Å—ã–ª–∫–∞: {link}"

        if image_link:
            if len(message_text) > 1024:
                print('1024')
                bot.send_photo(chat_id, image_link)
                bot.send_message(chat_id, message_text)
            else:
                bot.send_photo(chat_id, image_link, caption=message_text)
        else:
            bot.send_message(chat_id, message_text)
    else:
        bot.send_message(chat_id, "–ö–Ω–∏–≥–∞ –¥–Ω—è –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞")
def text_random_book(message):
    send_random_book(message.chat.id)


@bot.message_handler(commands=['randombook'])
def command_random_book(message):
    send_random_book(message.chat.id)


def send_random_book(message):
    books_list = [
        "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - –ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
        "–í–æ–π–Ω–∞ –∏ –º–∏—Ä - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
        "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ - –§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "–ò–¥–∏–æ—Ç - –§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "–ë—Ä–∞—Ç—å—è –ö–∞—Ä–∞–º–∞–∑–æ–≤—ã - –§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞ - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
        "–°–æ–±–∞—á—å–µ —Å–µ—Ä–¥—Ü–µ - –ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
        "–ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω",
        "–ì–µ—Ä–æ–π –Ω–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –ú–∏—Ö–∞–∏–ª –õ–µ—Ä–º–æ–Ω—Ç–æ–≤",
        "–û–±–ª–æ–º–æ–≤ - –ò–≤–∞–Ω –ì–æ–Ω—á–∞—Ä–æ–≤",
        "–û—Ç—Ü—ã –∏ –¥–µ—Ç–∏ - –ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤",
        "–ì–æ—Ä–µ –æ—Ç —É–º–∞ - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—Ä–∏–±–æ–µ–¥–æ–≤",
        "–ú–µ—Ä—Ç–≤—ã–µ –¥—É—à–∏ - –ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å",
        "–†–µ–≤–∏–∑–æ—Ä - –ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å",
        "–í–∏—à–Ω–µ–≤—ã–π —Å–∞–¥ - –ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤",
        "–¢—Ä–∏ —Å–µ—Å—Ç—Ä—ã - –ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤",
        "–ß–∞–π–∫–∞ - –ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤",
        "–î–æ–∫—Ç–æ—Ä –ñ–∏–≤–∞–≥–æ - –ë–æ—Ä–∏—Å –ü–∞—Å—Ç–µ—Ä–Ω–∞–∫",
        "–¢–∏—Ö–∏–π –î–æ–Ω - –ú–∏—Ö–∞–∏–ª –®–æ–ª–æ—Ö–æ–≤",
        "–ê–Ω–¥—Ä–µ–π –†—É–±–ª–µ–≤ - –ê–Ω–¥—Ä–µ–π –¢–∞—Ä–∫–æ–≤—Å–∫–∏–π",
        "–°–æ–ª—è—Ä–∏—Å - –°—Ç–∞–Ω–∏—Å–ª–∞–≤ –õ–µ–º",
        "–ü–∏–∫–Ω–∏–∫ –Ω–∞ –æ–±–æ—á–∏–Ω–µ - –ê—Ä–∫–∞–¥–∏–π –∏ –ë–æ—Ä–∏—Å –°—Ç—Ä—É–≥–∞—Ü–∫–∏–µ",
        "–¢—Ä—É–¥–Ω–æ –±—ã—Ç—å –±–æ–≥–æ–º - –ê—Ä–∫–∞–¥–∏–π –∏ –ë–æ—Ä–∏—Å –°—Ç—Ä—É–≥–∞—Ü–∫–∏–µ",
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —Å—É–±–±–æ—Ç—É - –ê—Ä–∫–∞–¥–∏–π –∏ –ë–æ—Ä–∏—Å –°—Ç—Ä—É–≥–∞—Ü–∫–∏–µ",
        "–ó–∞ –º–∏–ª–ª–∏–∞—Ä–¥ –ª–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Å–≤–µ—Ç–∞ - –ê—Ä–∫–∞–¥–∏–π –∏ –ë–æ—Ä–∏—Å –°—Ç—Ä—É–≥–∞—Ü–∫–∏–µ",
        "–î–µ—Ç–∏ –ê—Ä–±–∞—Ç–∞ - –ê–Ω–∞—Ç–æ–ª–∏–π –†—ã–±–∞–∫–æ–≤",
        "–ñ–∏–∑–Ω—å –∏ —Å—É–¥—å–±–∞ - –í–∞—Å–∏–ª–∏–π –ì—Ä–æ—Å—Å–º–∞–Ω",
        "–ë–µ–ª—ã–π –ø–∞—Ä–æ—Ö–æ–¥ - –ß–∏–Ω–≥–∏–∑ –ê–π—Ç–º–∞—Ç–æ–≤",
        "–î–∂–∞–º–∏–ª—è - –ß–∏–Ω–≥–∏–∑ –ê–π—Ç–º–∞—Ç–æ–≤",
        "–ü—Ä–æ—â–∞–π, –ì—É–ª—å—Å–∞—Ä—ã! - –ß–∏–Ω–≥–∏–∑ –ê–π—Ç–º–∞—Ç–æ–≤",
        "12 —Å—Ç—É–ª—å–µ–≤ - –ò–ª—å—è –ò–ª—å—Ñ –∏ –ï–≤–≥–µ–Ω–∏–π –ü–µ—Ç—Ä–æ–≤",
        "–ó–æ–ª–æ—Ç–æ–π —Ç–µ–ª–µ–Ω–æ–∫ - –ò–ª—å—è –ò–ª—å—Ñ –∏ –ï–≤–≥–µ–Ω–∏–π –ü–µ—Ç—Ä–æ–≤",
        "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ –≤ —Å–µ—Ç–∏ - –Ø–Ω—É—à –í–∏—à–Ω–µ–≤—Å–∫–∏–π",
        "–ú–æ—Å–∫–≤–∞ –∏ –º–æ—Å–∫–≤–∏—á–∏ - –í–ª–∞–¥–∏–º–∏—Ä –ì–∏–ª—è—Ä–æ–≤—Å–∫–∏–π",
        "–î–µ—Ç—Å—Ç–≤–æ - –ú–∞–∫—Å–∏–º –ì–æ—Ä—å–∫–∏–π",
        "–í –∞–ª—ã—Ö –ø–∞—Ä—É—Å–∞—Ö - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—Ä–∏–Ω",
        "–ê–ª—ã–µ –ø–∞—Ä—É—Å–∞ - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—Ä–∏–Ω",
        "–°–∫–∞–∑–∫–∞ –æ —Ü–∞—Ä–µ –°–∞–ª—Ç–∞–Ω–µ - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω",
        "–°–∫–∞–∑–∫–∞ –æ —Ä—ã–±–∞–∫–µ –∏ —Ä—ã–±–∫–µ - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω",
        "–°–∫–∞–∑–∫–∞ –æ –º–µ—Ä—Ç–≤–æ–π —Ü–∞—Ä–µ–≤–Ω–µ –∏ —Å–µ–º–∏ –±–æ–≥–∞—Ç—ã—Ä—è—Ö - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω",
        "–õ–æ–ª–∏—Ç–∞ - –í–ª–∞–¥–∏–º–∏—Ä –ù–∞–±–æ–∫–æ–≤",
        "–î–∞—Ä - –í–ª–∞–¥–∏–º–∏—Ä –ù–∞–±–æ–∫–æ–≤",
        "–ü–∞–ª–∞—Ç–∞ ‚Ññ6 - –ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤",
        "–°—Ç–µ–ø—å - –ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤",
        "–ö–∞—à—Ç–∞–Ω–∫–∞ - –ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤",
        "–ß–µ—Ä–Ω—ã–π –º–æ–Ω–∞—Ö - –ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤",
        "–£–ª–∏—Å—Å - –î–∂–µ–π–º—Å –î–∂–æ–π—Å",
        "–í–µ–ª–∏–∫–∏–π –ì—ç—Ç—Å–±–∏ - –§—Ä—ç–Ω—Å–∏—Å –°–∫–æ—Ç—Ç –§–∏—Ü–¥–∂–µ—Ä–∞–ª—å–¥",
        "1984 - –î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
        "–û –¥–∏–≤–Ω—ã–π –Ω–æ–≤—ã–π –º–∏—Ä - –û–ª–¥–æ—Å –•–∞–∫—Å–ª–∏",
        "–ì—Ä–∞—Ñ –ú–æ–Ω—Ç–µ-–ö—Ä–∏—Å—Ç–æ - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î—é–º–∞",
        "–¢—Ä–∏ –º—É—à–∫–µ—Ç–µ—Ä–∞ - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î—é–º–∞",
        "–ì–∞–º–ª–µ—Ç - –£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä",
        "–†–æ–º–µ–æ –∏ –î–∂—É–ª—å–µ—Ç—Ç–∞ - –£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä",
        "–ú–∞–∫–±–µ—Ç - –£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä",
        "–ì–æ—Ä–¥–æ—Å—Ç—å –∏ –ø—Ä–µ–¥—É–±–µ–∂–¥–µ–Ω–∏–µ - –î–∂–µ–π–Ω –û—Å—Ç–µ–Ω",
        "–î–∂–µ–π–Ω –≠–π—Ä - –®–∞—Ä–ª–æ—Ç—Ç–∞ –ë—Ä–æ–Ω—Ç–µ",
        "–ì—Ä–æ–∑–¥—å—è –≥–Ω–µ–≤–∞ - –î–∂–æ–Ω –°—Ç–µ–π–Ω–±–µ–∫",
        "–£–±–∏—Ç—å –ø–µ—Ä–µ—Å–º–µ—à–Ω–∏–∫–∞ - –•–∞—Ä–ø–µ—Ä –õ–∏",
        "–í –ø–æ–∏—Å–∫–∞—Ö —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –ú–∞—Ä—Å–µ–ª—å –ü—Ä—É—Å—Ç",
        "–ê–ª–∏—Å–∞ –≤ –°—Ç—Ä–∞–Ω–µ —á—É–¥–µ—Å - –õ—å—é–∏—Å –ö—ç—Ä—Ä–æ–ª–ª",
        "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –º—É—Ö - –£–∏–ª—å—è–º –ì–æ–ª–¥–∏–Ω–≥",
        "–°—Ç–æ –ª–µ—Ç –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞ - –ì–∞–±—Ä–∏—ç–ª—å –ì–∞—Ä—Å–∏–∞ –ú–∞—Ä–∫–µ—Å",
        "–õ–æ–ª–∏—Ç–∞ - –í–ª–∞–¥–∏–º–∏—Ä –ù–∞–±–æ–∫–æ–≤",
        "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞ - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
        "–í–æ–π–Ω–∞ –∏ –º–∏—Ä - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
        "–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü - –ú–∞—Ä–∏–æ –ü—å—é–∑–æ",
        "–§–∞—É—Å—Ç - –ò–æ–≥–∞–Ω–Ω –í–æ–ª—å—Ñ–≥–∞–Ω–≥ —Ñ–æ–Ω –ì—ë—Ç–µ",
        "–î–æ–Ω –ö–∏—Ö–æ—Ç - –ú–∏–≥–µ–ª—å –¥–µ –°–µ—Ä–≤–∞–Ω—Ç–µ—Å",
        "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–µ–¥–∏—è - –î–∞–Ω—Ç–µ –ê–ª–∏–≥—å–µ—Ä–∏",
        "–ò–¥–∏–æ—Ç - –§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "–ú–æ–±–∏ –î–∏–∫ - –ì–µ—Ä–º–∞–Ω –ú–µ–ª–≤–∏–ª–ª",
        "–§—Ä–∞–Ω–∫–µ–Ω—à—Ç–µ–π–Ω - –ú—ç—Ä–∏ –®–µ–ª–ª–∏",
        "–î—Ä–∞–∫—É–ª–∞ - –ë—Ä—ç–º –°—Ç–æ–∫–µ—Ä",
        "1984 - –î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
        "–ë–æ–ª—å—à–∏–µ –Ω–∞–¥–µ–∂–¥—ã - –ß–∞—Ä–ª—å–∑ –î–∏–∫–∫–µ–Ω—Å",
        "–û–ª–∏–≤–µ—Ä –¢–≤–∏—Å—Ç - –ß–∞—Ä–ª—å–∑ –î–∏–∫–∫–µ–Ω—Å",
        "–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∞—è –ø–µ—Å–Ω—å - –ß–∞—Ä–ª—å–∑ –î–∏–∫–∫–µ–Ω—Å",
        "–ñ–µ—Å—Ç–æ–∫–∏–π –≤–µ–∫ - –ö–µ–Ω –§–æ–ª–ª–µ—Ç",
        "–°—Ç–æ–ª–ø—ã –ó–µ–º–ª–∏ - –ö–µ–Ω –§–æ–ª–ª–µ—Ç",
        "–£–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤–µ—Ç—Ä–æ–º - –ú–∞—Ä–≥–∞—Ä–µ—Ç –ú–∏—Ç—á–µ–ª–ª",
        "–ü–æ–π–º–∞–π –≤–µ—Ç–µ—Ä - –•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏",
        "–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π –ª–µ—Å - –•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏",
        "–ö–∞—Ñ–∫–∞ –Ω–∞ –ø–ª—è–∂–µ - –•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏",
        "1Q84 - –•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏",
        "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤ - –î–∂–æ—Ä–¥–∂ –†. –†. –ú–∞—Ä—Ç–∏–Ω",
        "–ö–ª–∞–Ω –°–æ–ø—Ä–∞–Ω–æ - –î—ç–≤–∏–¥ –ß–µ–π–∑",
        "–•—Ä–æ–Ω–∏–∫–∏ –ù–∞—Ä–Ω–∏–∏ - –ö. –°. –õ—å—é–∏—Å",
        "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä - –î–∂. –ö. –†–æ—É–ª–∏–Ω–≥",
        "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü - –î–∂. –†. –†. –¢–æ–ª–∫–∏–µ–Ω",
        "–•–æ–±–±–∏—Ç, –∏–ª–∏ –¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ - –î–∂. –†. –†. –¢–æ–ª–∫–∏–µ–Ω",
        "–°–∏–ª—å–º–∞—Ä–∏–ª–ª–∏–æ–Ω - –î–∂. –†. –†. –¢–æ–ª–∫–∏–µ–Ω",
        "–ü–µ—Å–Ω—å –ª—å–¥–∞ –∏ –ø–ª–∞–º–µ–Ω–∏ - –î–∂–æ—Ä–¥–∂ –†. –†. –ú–∞—Ä—Ç–∏–Ω"
    ]
    get_random_book(message, books_list)


def get_random_book(message, book_list):

    random_title = random.choice(book_list)
    url = 'https://www.googleapis.com/books/v1/volumes'
    params = {
        'q': f"{random_title}",
        'key': GOOGLE_BOOKS_API,
        'maxResults': 1,
        'langRestrict': 'ru',
        'filter': 'ebooks',
        'printType': 'books'
    }
    response = requests.get(url, params=params)
    print(response)
    if response.status_code == 200:
        print(response.json())
        books = response.json().get('items', [])
        if books:
            book = books[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            print(book)
            title = book['volumeInfo'].get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            authors = ', '.join(book['volumeInfo'].get('authors', ['–ê–≤—Ç–æ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã']))
            description = book['volumeInfo'].get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            publishedDate = book['volumeInfo'].get('publishedDate', '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            categories = ', '.join(book['volumeInfo'].get('categories', ['–ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã']))
            link = book['volumeInfo'].get('previewLink', '–°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
            image_link = book['volumeInfo'].get('imageLinks', {}).get('thumbnail', '')

            message_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–ê–≤—Ç–æ—Ä—ã: {authors}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {publishedDate}\n–ñ–∞–Ω—Ä—ã: {categories}\n–°—Å—ã–ª–∫–∞: {link}"
            if image_link:
                if len(message_text) > 1024:
                    bot.send_photo(message, image_link)
                    bot.send_message(message, message_text)
                else:
                    bot.send_photo(message, image_link, caption=message_text)
            else:
                bot.send_message(message, message_text)
        else:
            return "–ö–Ω–∏–≥–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∫–Ω–∏–≥–∏."


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text.startswith("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"))
def text_search(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(msg, perform_book_search)


@bot.message_handler(commands=['search'])
def command_search(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(msg, perform_book_search)


def perform_book_search(message):
    keyword = message.text
    search_book(message, keyword)


def search_book(message, keyword):
    url = 'https://www.googleapis.com/books/v1/volumes'
    params = {
        'q': f"+intitle:{keyword}",
        'key': GOOGLE_BOOKS_API,
        'maxResults': 1,
        'filter': 'ebooks',
        'printType': 'books'
    }
    response = requests.get(url, params=params)
    print(response)
    if response.status_code == 200:
        print(response.json())
        books = response.json().get('items', [])
        if books:
            book = books[0]
            print(book)
            title = book['volumeInfo'].get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            authors = ', '.join(book['volumeInfo'].get('authors', ['–ê–≤—Ç–æ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã']))
            description = book['volumeInfo'].get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            publishedDate = book['volumeInfo'].get('publishedDate', '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            categories = ', '.join(book['volumeInfo'].get('categories', ['–ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã']))
            link = book['volumeInfo'].get('previewLink', '–°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
            image_link = book['volumeInfo'].get('imageLinks', {}).get('thumbnail', '')

            message_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–ê–≤—Ç–æ—Ä—ã: {authors}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {publishedDate}\n–ñ–∞–Ω—Ä—ã: {categories}\n–°—Å—ã–ª–∫–∞: {link}"
            if image_link:
                if len(message_text) > 1024:
                    bot.send_photo(message.chat.id, image_link)
                    bot.send_message(message.chat.id, message_text)
                else:
                    bot.send_photo(message.chat.id, image_link, caption=message_text)
            else:
                bot.send_message(message.chat.id, message_text)
        else:
            bot.reply_to(message, "–ö–Ω–∏–≥–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Books API.")


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
def text_subscribe(message):
    subscribe(message)


@bot.message_handler(commands=['subscribe'])
def command_subscribe(message):
    subscribe(message)


def subscribe(message):
    user_id = message.chat.id
    existing_user = users_collection.find_one({'chat_id': user_id})
    if existing_user:
        current_time = existing_user.get('reminder_time', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        formatted_time = format_time(current_time)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        yes_button = types.KeyboardButton("–î–∞")
        no_button = types.KeyboardButton("–ù–µ—Ç")
        markup.add(yes_button, no_button)
        sent_message = bot.send_message(user_id,
                                        f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {formatted_time}. –•–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è?",
                                        reply_markup=markup)
        bot.register_next_step_handler(sent_message, process_time_change_decision)
    else:
        msg = bot.send_message(user_id,
                               "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú ("
                               "24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).")
        bot.register_next_step_handler(msg, process_subscription_time)


def format_time(minutes_since_midnight):
    if minutes_since_midnight == "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ":
        return minutes_since_midnight

    hours, minutes = divmod(int(minutes_since_midnight), 60)
    return f"{hours:02d}:{minutes:02d}"


def process_time_change_decision(message):
    if message.text == "–î–∞":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).")
        bot.register_next_step_handler(msg, process_subscription_time)
    elif message.text == "–ù–µ—Ç":
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –≤–∞—à–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        handle_books(message)
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        bot.register_next_step_handler(msg, process_time_change_decision)


def process_subscription_time(message):
    user_id = message.from_user.id
    try:
        if not re.match(r'^\d{2}:\d{2}$', message.text):
            raise ValueError("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ß:–ú–ú.")

        reminder_time = datetime.strptime(message.text, "%H:%M").time()
        minutes_since_midnight = reminder_time.hour * 60 + reminder_time.minute

        now = datetime.now()
        minutes_since_midnight_now = now.hour * 60 + now.minute

        if reminder_time.hour > 23 or reminder_time.minute > 59:
            raise ValueError("–£–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è.")

        user_data = {
            'chat_id': user_id,
            'username': message.from_user.username,
            'subscribed_at': datetime.now(),
            'reminder_time': minutes_since_midnight
        }

        if minutes_since_midnight < minutes_since_midnight_now:
            current_date = now.date()
            current_datetime = datetime(current_date.year, current_date.month, current_date.day)

            user_data['last_reminder_date'] = current_datetime
        else:
            user_data['last_reminder_date'] = None

        existing_user = users_collection.find_one({'chat_id': user_id})
        if existing_user:
            users_collection.update_one(
                {'chat_id': user_id},
                {'$set': {
                    'reminder_time': user_data['reminder_time'],
                    'last_reminder_date': user_data['last_reminder_date']
                }}
            )
        else:
            users_collection.insert_one(user_data)

        bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á—Ç–µ–Ω–∏–∏ –∫–Ω–∏–≥!")
        handle_books(message)
    except ValueError as e:
        msg = bot.send_message(user_id, str(e) + " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        bot.register_next_step_handler(msg, process_subscription_time)


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
def text_unsubscribe(message):
    unsubscribe(message)


@bot.message_handler(commands=['unsubscribe'])
def command_unsubscribe(message):
    unsubscribe(message)


def unsubscribe(message):
    user_id = message.chat.id
    existing_user = users_collection.find_one({'chat_id': user_id})
    if existing_user:
        users_collection.delete_one({'chat_id': user_id})
        bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏!")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")


# ------------------------------------------------------------------------------------------------
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def text_back(message):
    start(message)


@bot.message_handler(commands=['back'])
def command_back(message):
    start(message)


# ------------------------------------------------------------------------------------------------
def send_reminder_to_subscribers():
    now = datetime.now()
    current_minutes_since_midnight = now.hour * 60 + now.minute
    current_date = now.date()
    current_datetime = datetime(current_date.year, current_date.month, current_date.day)

    subscribers = users_collection.find({
        "reminder_time": {"$lte": current_minutes_since_midnight},
        "$or": [
            {"last_reminder_date": {"$ne": current_datetime}},
            {"last_reminder_date": {"$exists": False}}
        ]
    })

    for subscriber in subscribers:
        chat_id = subscriber['chat_id']
        print(chat_id)
        bot.send_message(chat_id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É —Å–µ–≥–æ–¥–Ω—è!")
        users_collection.update_one({'_id': subscriber['_id']}, {"$set": {"last_reminder_date": current_datetime}})
        send_daily_book(chat_id)


# ------------------------------------------------------------------------------------------------
def update_book_of_the_day():
    current_date = datetime.now().date()
    current_datetime = datetime(current_date.year, current_date.month, current_date.day)
    current_bod = books_collection.find_one({'book_of_the_day': True})

    if current_bod and ('last_update' not in current_bod or current_bod['last_update'] < current_datetime):
        exclude_id = current_bod['_id'] if current_bod else None

        if exclude_id:
            books_collection.update_one({'_id': ObjectId(exclude_id)}, {'$set': {'book_of_the_day': False}})

        query = {'_id': {'$ne': ObjectId(exclude_id)}} if exclude_id else {}
        total_books = books_collection.count_documents(query)
        random_index = random.randint(0, total_books - 1)
        new_book_of_the_day = books_collection.find(query).skip(random_index).limit(1).next()

        books_collection.update_one({'_id': new_book_of_the_day['_id']},
                                    {'$set': {'book_of_the_day': True, 'last_update': current_datetime}})
        print("Book of the day updated.")


# ------------------------------------------------------------------------------------------------
def job():
    print("Updating book of the day...")
    update_book_of_the_day()
    print("Sending reminders to subscribers...")
    send_reminder_to_subscribers()


def run_pending():
    while True:
        print('run_pending')
        job()
        time.sleep(60)



schedule_thread = threading.Thread(target=run_pending)
schedule_thread.start()


bot.polling(none_stop=True)
